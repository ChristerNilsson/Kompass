// Generated by CoffeeScript 2.7.0
// Målkoordinater (t.ex. Brandparken)
var calculateBearing, dump, f, messages, previousPosition, targetLat, targetLon, toDegrees, toRadians, updateArrow, watchError;

targetLat = 59.266338;

targetLon = 18.131969;

previousPosition = null;

toRadians = function(deg) {
  return deg * Math.PI / 180;
};

toDegrees = function(rad) {
  return rad * 180 / Math.PI;
};

messages = [];

dump = function(msg) {
  messages.unshift(msg);
  if (messages.length > 20) {
    messages.pop();
  }
  return document.getElementById('debug').innerText = messages.join("\n");
};

calculateBearing = function(lat1, lon1, lat2, lon2) {
  var x, y, Δλ, φ1, φ2;
  φ1 = toRadians(lat1);
  φ2 = toRadians(lat2);
  Δλ = toRadians(lon2 - lon1);
  y = Math.sin(Δλ) * Math.cos(φ2);
  x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
  return (toDegrees(Math.atan2(y, x)) + 360) % 360;
};

updateArrow = function(bearingToTarget) {
  var arrow;
  arrow = document.getElementById('arrow');
  return arrow.style.transform = `rotate(${bearingToTarget}deg)`;
};

f = function(position) {
  var latitude, longitude, movementBearing, relativeBearing, targetBearing;
  ({latitude, longitude} = position.coords);
  if (previousPosition != null) {
    movementBearing = calculateBearing(previousPosition.latitude, previousPosition.longitude, latitude, longitude);
    targetBearing = calculateBearing(latitude, longitude, targetLat, targetLon);
    relativeBearing = (targetBearing - movementBearing + 360) % 360;
    updateArrow(relativeBearing);
    dump(`M:${Math.round(movementBearing)}° T:${Math.round(targetBearing)}° R:${Math.round(relativeBearing)}°`);
  }
  return previousPosition = {
    latitude: latitude,
    longitude: longitude
  };
};

watchError = function(error) {
  return dump(`Kunde inte hämta GPS-position ${error}`);
};

navigator.geolocation.watchPosition(f, watchError, {
  enableHighAccuracy: true,
  maximumAge: 1000,
  timeout: 5000
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6IlxcIiwic291cmNlcyI6WyJza2V0Y2guY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDb0M7QUFBQSxJQUFBLGdCQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxRQUFBLEVBQUEsZ0JBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsV0FBQSxFQUFBOztBQUNsQyxTQUFBLEdBQVk7O0FBQ1osU0FBQSxHQUFZOztBQUVaLGdCQUFBLEdBQW1COztBQUVuQixTQUFBLEdBQVksUUFBQSxDQUFDLEdBQUQsQ0FBQTtTQUFTLEdBQUEsR0FBTSxJQUFJLENBQUMsRUFBWCxHQUFnQjtBQUF6Qjs7QUFDWixTQUFBLEdBQVksUUFBQSxDQUFDLEdBQUQsQ0FBQTtTQUFTLEdBQUEsR0FBTSxHQUFOLEdBQVksSUFBSSxDQUFDO0FBQTFCOztBQUVaLFFBQUEsR0FBVzs7QUFFWCxJQUFBLEdBQU8sUUFBQSxDQUFDLEdBQUQsQ0FBQTtFQUNQLFFBQVEsQ0FBQyxPQUFULENBQWlCLEdBQWpCO0VBQ0EsSUFBRyxRQUFRLENBQUMsTUFBVCxHQUFrQixFQUFyQjtJQUE2QixRQUFRLENBQUMsR0FBVCxDQUFBLEVBQTdCOztTQUNBLFFBQVEsQ0FBQyxjQUFULENBQXdCLE9BQXhCLENBQWdDLENBQUMsU0FBakMsR0FBNkMsUUFBUSxDQUFDLElBQVQsQ0FBYyxJQUFkO0FBSHRDOztBQUtQLGdCQUFBLEdBQW1CLFFBQUEsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsQ0FBQTtBQUNwQixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQTtFQUFDLEVBQUEsR0FBSyxTQUFBLENBQVUsSUFBVjtFQUNMLEVBQUEsR0FBSyxTQUFBLENBQVUsSUFBVjtFQUNMLEVBQUEsR0FBSyxTQUFBLENBQVUsSUFBQSxHQUFPLElBQWpCO0VBQ0wsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBVCxDQUFBLEdBQWUsSUFBSSxDQUFDLEdBQUwsQ0FBUyxFQUFUO0VBQ25CLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBQSxHQUFlLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBVCxDQUFmLEdBQThCLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBVCxDQUFBLEdBQWUsSUFBSSxDQUFDLEdBQUwsQ0FBUyxFQUFULENBQWYsR0FBOEIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxFQUFUO1NBQ2hFLENBQUMsU0FBQSxDQUFVLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsQ0FBVixDQUFBLEdBQThCLEdBQS9CLENBQUEsR0FBc0M7QUFObkI7O0FBUW5CLFdBQUEsR0FBYyxRQUFBLENBQUMsZUFBRCxDQUFBO0FBQ2YsTUFBQTtFQUFDLEtBQUEsR0FBUSxRQUFRLENBQUMsY0FBVCxDQUF3QixPQUF4QjtTQUNSLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBWixHQUF3QixDQUFBLE9BQUEsQ0FBQSxDQUFVLGVBQVYsQ0FBQSxJQUFBO0FBRlY7O0FBSWQsQ0FBQSxHQUFJLFFBQUEsQ0FBQyxRQUFELENBQUE7QUFDTCxNQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsZUFBQSxFQUFBLGVBQUEsRUFBQTtFQUFDLENBQUEsQ0FBQyxRQUFELEVBQVcsU0FBWCxDQUFBLEdBQXdCLFFBQVEsQ0FBQyxNQUFqQztFQUVBLElBQUcsd0JBQUg7SUFDQyxlQUFBLEdBQWtCLGdCQUFBLENBQWlCLGdCQUFnQixDQUFDLFFBQWxDLEVBQTRDLGdCQUFnQixDQUFDLFNBQTdELEVBQXdFLFFBQXhFLEVBQWtGLFNBQWxGO0lBQ2xCLGFBQUEsR0FBZ0IsZ0JBQUEsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsRUFBc0MsU0FBdEMsRUFBaUQsU0FBakQ7SUFDaEIsZUFBQSxHQUFrQixDQUFDLGFBQUEsR0FBZ0IsZUFBaEIsR0FBa0MsR0FBbkMsQ0FBQSxHQUEwQztJQUM1RCxXQUFBLENBQVksZUFBWjtJQUNBLElBQUEsQ0FBSyxDQUFBLEVBQUEsQ0FBQSxDQUFLLElBQUksQ0FBQyxLQUFMLENBQVcsZUFBWCxDQUFMLENBQUEsSUFBQSxDQUFBLENBQXVDLElBQUksQ0FBQyxLQUFMLENBQVcsYUFBWCxDQUF2QyxDQUFBLElBQUEsQ0FBQSxDQUF1RSxJQUFJLENBQUMsS0FBTCxDQUFXLGVBQVgsQ0FBdkUsQ0FBQSxDQUFBLENBQUwsRUFMRDs7U0FPQSxnQkFBQSxHQUNDO0lBQUEsUUFBQSxFQUFVLFFBQVY7SUFDQSxTQUFBLEVBQVc7RUFEWDtBQVhHOztBQWNKLFVBQUEsR0FBYSxRQUFBLENBQUMsS0FBRCxDQUFBO1NBQVcsSUFBQSxDQUFLLENBQUEsOEJBQUEsQ0FBQSxDQUFpQyxLQUFqQyxDQUFBLENBQUw7QUFBWDs7QUFFYixTQUFTLENBQUMsV0FBVyxDQUFDLGFBQXRCLENBQW9DLENBQXBDLEVBQXVDLFVBQXZDLEVBQW1EO0VBQUMsa0JBQUEsRUFBb0IsSUFBckI7RUFBMkIsVUFBQSxFQUFZLElBQXZDO0VBQTZDLE9BQUEsRUFBUztBQUF0RCxDQUFuRCIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4jIE3DpWxrb29yZGluYXRlciAodC5leC4gQnJhbmRwYXJrZW4pXHJcbnRhcmdldExhdCA9IDU5LjI2NjMzOFxyXG50YXJnZXRMb24gPSAxOC4xMzE5NjlcclxuXHJcbnByZXZpb3VzUG9zaXRpb24gPSBudWxsXHJcblxyXG50b1JhZGlhbnMgPSAoZGVnKSAtPiBkZWcgKiBNYXRoLlBJIC8gMTgwXHJcbnRvRGVncmVlcyA9IChyYWQpIC0+IHJhZCAqIDE4MCAvIE1hdGguUElcclxuXHJcbm1lc3NhZ2VzID0gW11cclxuXHJcbmR1bXAgPSAobXNnKSAtPlxyXG5cdG1lc3NhZ2VzLnVuc2hpZnQgbXNnXHJcblx0aWYgbWVzc2FnZXMubGVuZ3RoID4gMjAgdGhlbiBtZXNzYWdlcy5wb3AoKVxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWJ1ZycpLmlubmVyVGV4dCA9IG1lc3NhZ2VzLmpvaW4gXCJcXG5cIlxyXG5cclxuY2FsY3VsYXRlQmVhcmluZyA9IChsYXQxLCBsb24xLCBsYXQyLCBsb24yKSAtPlxyXG5cdM+GMSA9IHRvUmFkaWFucyBsYXQxXHJcblx0z4YyID0gdG9SYWRpYW5zIGxhdDJcclxuXHTOlM67ID0gdG9SYWRpYW5zIGxvbjIgLSBsb24xXHJcblx0eSA9IE1hdGguc2luKM6UzrspICogTWF0aC5jb3Moz4YyKVxyXG5cdHggPSBNYXRoLmNvcyjPhjEpICogTWF0aC5zaW4oz4YyKSAtIE1hdGguc2luKM+GMSkgKiBNYXRoLmNvcyjPhjIpICogTWF0aC5jb3MozpTOuylcclxuXHQodG9EZWdyZWVzKE1hdGguYXRhbjIoeSwgeCkpICsgMzYwKSAlIDM2MFxyXG5cclxudXBkYXRlQXJyb3cgPSAoYmVhcmluZ1RvVGFyZ2V0KSAtPlxyXG5cdGFycm93ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fycm93JylcclxuXHRhcnJvdy5zdHlsZS50cmFuc2Zvcm0gPSBcInJvdGF0ZSgje2JlYXJpbmdUb1RhcmdldH1kZWcpXCJcclxuXHJcbmYgPSAocG9zaXRpb24pIC0+XHJcblx0e2xhdGl0dWRlLCBsb25naXR1ZGV9ID0gcG9zaXRpb24uY29vcmRzXHJcblxyXG5cdGlmIHByZXZpb3VzUG9zaXRpb24/XHJcblx0XHRtb3ZlbWVudEJlYXJpbmcgPSBjYWxjdWxhdGVCZWFyaW5nIHByZXZpb3VzUG9zaXRpb24ubGF0aXR1ZGUsIHByZXZpb3VzUG9zaXRpb24ubG9uZ2l0dWRlLCBsYXRpdHVkZSwgbG9uZ2l0dWRlXHJcblx0XHR0YXJnZXRCZWFyaW5nID0gY2FsY3VsYXRlQmVhcmluZyBsYXRpdHVkZSwgbG9uZ2l0dWRlLCB0YXJnZXRMYXQsIHRhcmdldExvblxyXG5cdFx0cmVsYXRpdmVCZWFyaW5nID0gKHRhcmdldEJlYXJpbmcgLSBtb3ZlbWVudEJlYXJpbmcgKyAzNjApICUgMzYwXHJcblx0XHR1cGRhdGVBcnJvdyByZWxhdGl2ZUJlYXJpbmdcclxuXHRcdGR1bXAgXCJNOiN7TWF0aC5yb3VuZChtb3ZlbWVudEJlYXJpbmcpfcKwIFQ6I3tNYXRoLnJvdW5kKHRhcmdldEJlYXJpbmcpfcKwIFI6I3tNYXRoLnJvdW5kKHJlbGF0aXZlQmVhcmluZyl9wrBcIlxyXG5cclxuXHRwcmV2aW91c1Bvc2l0aW9uID1cclxuXHRcdGxhdGl0dWRlOiBsYXRpdHVkZVxyXG5cdFx0bG9uZ2l0dWRlOiBsb25naXR1ZGVcclxuXHJcbndhdGNoRXJyb3IgPSAoZXJyb3IpIC0+IGR1bXAgXCJLdW5kZSBpbnRlIGjDpG10YSBHUFMtcG9zaXRpb24gI3tlcnJvcn1cIlxyXG5cclxubmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gZixcdHdhdGNoRXJyb3IsIHtlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUsIG1heGltdW1BZ2U6IDEwMDAsIHRpbWVvdXQ6IDUwMDB9XHJcblxyXG4iXX0=
//# sourceURL=c:\github\Kompass\sketch.coffee